package sota.utils

import org.scalatest.{Matchers, WordSpec}
import sota.model.{Bundle, Transaction}

class MultisigTest extends WordSpec with Matchers {

  val TEST_SEED1 = "ABCDFG"
  val TEST_SEED2 = "ABCDFG"

  "Multisig - getDigest" should {

    "return tryte-encoded seed" in {
      val expected = "FWNEPVJNGUKTSHSBDO9AORBCVWWLVXC9KAMKYYNKPYNJDKSAUURI9ELKOEEYPKVTYPCKOCJQESYFEMINIFKX9PDDGRBEEHYYXCJW9LHGWFZGHKCPVDBGMGQKIPCNKNITGMZTDIWVUB9PCHCOPHMIWKSUKRHZOJPMAYXQPLLUDJNCYMUAJBE9XXYYDQ9JYANVMAOEN9NKGJR9HUNJKV9YYBQLOQLXBIEBIMPL9IAWXATKLEMOCVP"
      val m = Multisig()
      val actual = m.getDigest(TEST_SEED1, 3, 0)

      actual shouldBe expected
    }

  }

  "Multisig - addAddressDigest" should {

    "return digest trytes when curlStateTrytes is not empty" in {
      val digestTrytes = "FWNEPVJNGUKTSHSBDO9AORBCVWWLVXC9KAMKYYNKPYNJDKSAUURI9ELKOEEYPKVTYPCKOCJQESYFEMINIFKX9PDDGRBEEHYYXCJW9LHGWFZGHKCPVDBGMGQKIPCNKNITGMZTDIWVUB9PCHCOPHMIWKSUKRHZOJPMAYXQPLLUDJNCYMUAJBE9XXYYDQ9JYANVMAOEN9NKGJR9HUNJKV9YYBQLOQLXBIEBIMPL9IAWXATKLEMOCVP"
      val curlStateTrytes = ""
      val expected = "QCCWYWKPZHIXNXGGZSNSPMPPFRXPLLRCPMFNWLQNACVJOTIGVZSYWBGNGGHAPXFYNKEWIYRHOGOMFJAKGVNXWSW9LOOAOLATAIYH9OGIQGEVMHNWMFNRW9ZBQCJHYXBEXJVZHIOCVKYWDPORXZHRY99FSSWOKERHRBWXJBUEGMRCLRDTYRSDXZWSLDIBBV9HH9WSKISZOJLLWM9QJGRRODHXACUGZNFIXEEHGOTFPRLTECNHDEK"
      val m = Multisig()
      val actual = m.addAddressDigest(digestTrytes, curlStateTrytes)

      actual shouldBe expected
    }

    "return digest trytes when curlStateTrytes is empty" in {
      val digestTrytes = "FWNEPVJNGUKTSHSBDO9AORBCVWWLVXC9KAMKYYNKPYNJDKSAUURI9ELKOEEYPKVTYPCKOCJQESYFEMINIFKX9PDDGRBEEHYYXCJW9LHGWFZGHKCPVDBGMGQKIPCNKNITGMZTDIWVUB9PCHCOPHMIWKSUKRHZOJPMAYXQPLLUDJNCYMUAJBE9XXYYDQ9JYANVMAOEN9NKGJR9HUNJKV9YYBQLOQLXBIEBIMPL9IAWXATKLEMOCVP"
      val curlStateTrytes = "QCCWYWKPZHIXNXGGZSNSPMPPFRXPLLRCPMFNWLQNACVJOTIGVZSYWBGNGGHAPXFYNKEWIYRHOGOMFJAKGVNXWSW9LOOAOLATAIYH9OGIQGEVMHNWMFNRW9ZBQCJHYXBEXJVZHIOCVKYWDPORXZHRY99FSSWOKERHRBWXJBUEGMRCLRDTYRSDXZWSLDIBBV9HH9WSKISZOJLLWM9QJGRRODHXACUGZNFIXEEHGOTFPRLTECNHDEK"
      val expected = "POKNZYYTHDEAOZWNWXECYPKCH9ACVWUQHSCPCHMZRDLQVQPJUNOWNUJHTCASVCZON9PJ9XCCDVEKYSGMTTUCXW9KHKKXBSOQIMKELBRRMN9GDHRT9DEFHXMWEIGVXVFIGXKSUJDIOIDFBIFUSEGIZIHISJCPKHMIN9TNEREPCWYSPOGLVBOXI9YKU9YUSUCGETDQRHVYTMDLRGFXGI9W9UAOREO9AOHLBCDCHFQLBMFYX9DZQRJ"
      val m = Multisig()
      val actual = m.addAddressDigest(digestTrytes, curlStateTrytes)

      actual shouldBe expected
    }

  }

  "Multisig - getKey" should {

    "return the key value of a seed" in {
      val expected = "RTDOBLEGBNKXRUYHMQNZCUUHFAWMKFISYKVZQMDAY9SKISBQANXYNMG9SPAPMUSCYIVCMNRGH9T9TFXCCKFJSCZIHELJ9KDI9PKSFKIFWSVPGNTNWCLJRRXOYWENAEOUIHYNVUAAASZEKRLNCRMMRYDRK9AHZKPXGFJZZKLEUCBJ9XAPTXOBPOCXXCIT9NEDNIRCXEKDTRFQCTKCWLMQFWXYDMHBKBMX9OBFKNBVEXNTKCMIBLOMJKPEFVMBTETYZCY9LFGUOYRKQW9CCDAYLSOLOAZLRPFPXFLASGGUUXFXDGCSQWIRCRKEOHDMWYAUIMVQMDQJ9SOQODAOAICBKPB9ZXLYYZABWQGMYFIIEJKLHKCUBHFHXVJLBWDFXB9AKXYPJFDTGSQTQPUCVZDPEKDCNGVWNPYYELYLLYHX9AGQVQCEVVIKZCWRVQEKQVQFWCPYLIHGLYZWGDDYXPWWUVWXWCE9RYSLCVHFJIEESCLVBKVUJMUUZSBGCCXLITFCTZPRW9FCDDNVOWUIWARKHIPHRKETZAKRCWXZFEMQDGR9GRDUYIPRAZZRONNIM9KPLMWGLZJRMF9TLPVVKTQXLRAURRTUE99XPOIMBGWJZ9P9QKRMBOGQRMCBZEJPHCULNKNFYMNLUAIEMLENAHPTY9PAQFAURZRYKXYVNKSNYWUVNYQSMGLTJKHUCXTQAECWJISSCLYMNJALXZDNJSYIGHSGRWXCSGJXIKOCLHORJRKTQNZKJWBEVGOP9FEVLIKXUWMCHKNOWQMRTBYYQOLJEJDHDQKMSIKAAJECUQ9PGAMATAENJTAFSPZFVUSDV9GSCXLCNCIJWJTVNN9DYBCKXCXQOZMAIXYVUCNSBKFRNUVOIEJCGBRRLSOLEZPHQDCYZ9XLZXXKXERUKIWY9KCNWEUCBZVJSNEOBDYEHOWRVCHNBONSUAQAVQUDXZZVWUYHBZCUNURZOAPLEQLSTPHTXOWOCCWZYXTVUMAVZZQKMWWMOGNRJBIQQYIOWPHVDLUEQVSNDVOQDYVEEGOYRNZDX9HJTICPNMHOBWTYQXFJJTMTEBUFGSOMNUULVHWLPRNLHJVGTWDUUMSYJQRRH9PWOQPJMHBVJPTJAUBHHLZKNUQDNTKIETOQRKERJSJGZUC9PQYHYDFIMGYFRZEZZEKZYBCGBUKNDQR9MPARH9FWEVQFJDNPUHWG9QAK9ERJEHNKQYKLQIEOKUAZYAKYORVGIVTPKJXSQWBGROXPKRNYBNZKVCCXDCFHZ9HM9WFSZPECZNKEEWVCY9QKPKGJRLHLKGFTVFWLOXQOYJRTKXQRSEQBCKOOMMAYOGLGCM9CHRSONWSFZJMSNTMSKRTRQCBWFUGZAGBMOPQJNJNTZXWTRAQYGGULFHYM9JNQTQVIVHNUFVVTVAHZYWXWPATKUGMHDIBJYHWXQVIMVTSLMAGAGWGKSOIYDAXGCGHTNTKVYIYBWTPWTPAEECMOSACVODCWUJRYYR9MPRTTYAFHENDLXISUIRMNNKBCREXLXEWVRXGTYMN9QTUYWCOEOVIGVFFYXSAEZLZPDEONF9AXVMOYLXLNSCQUGCDXUGPXPJULKL9PSBFAUDLRJRCVCZCNYCMQG9EBHZDIKLHANHMMMDBANBYMZRTWTPYU9HHYYNCFEKO9YRJ9MTXQKZZ9IGVJRNEIVYCEFAASRCUJZIGDPWFBQJPCRJ9MKQZUYCFSLB9QDNTVNPQUEYSJTA9DQFYGOVZKVYQZLX9YVYJLDMRMKOUZLCSONEVHYZAMOU9VSMRUJLGZYNWDXPVJONVHHSUXXIQGUZDVIYPDYYQN99QQAEJLPMZBTZKNKQLV9LPKVEJLRFRWZDJW9MEGXNRSVAWDSIZNFAFNHUBXIILMOWJCZAVBYUVLYZWJAKNDTQGSPLHJTBKUSCSCHA9OMBZIZSNJACKHTTNJPHQYNWBAEACMTWNKPNAHIPFRTCAT9DRDFFVVBN9CJILSDAT9ICSSTKDPOCUSESTIUEJSOKBJCOBJJOQCFLSMPCJEKWVBVIAVOCNTNMGRTWSFNRXTZH9CAWKUZYRVIAOCYBLRGAO9OLQTY99GPHKDTOVBTIXQJJLCFLC9WTMTNRVGHZTVZYK9SPHPTRUWIRAIUBKNTKZSLTQDEMSTQTNDOMXNHRVDSXZQGY9XMKRMGROTNCAFDODZTIEGWZZYPTUSIGHSPDZJMQNAXUNUOMGALTIENIMAHVXLKDMOXHBYJCEEHPPLSBCPRBMMORWCZXVTJYAFPTAQKFOPNRUISPJZ9IHUJPWEFPSEZ9ERUUVAKNIJSAVPFZESDKQXFO9TZKEHWAKLRTNHZCXLSSULZWGHIEDXGMSDINO9UCQYBQITKFJCWKONNEJODNEZESMLHVXBGKQXGBCNE9SPNHPEUUJOMWMLESQLFRREGTXNVRKJTVQLC9WMTRTBESWECTPECGJFXWJKMWSVHJ9UQQRUNSRBVZMDCMURPSFHTWHP9CAD9CLN9VZWSEB9XXHRJYENLPAYJ9DVYPKNROQIVGHOPOWTRUCZXVCOTIPFROINFMBRZKV9TDYEYUUBJA9TIYCNMJYNPGBOZIOWNCLQEJXNYRTJQIDEDFDFJUFXEATMCCXJINXGOLQK9BOOFDHTEUKUVZWEXWNLHATJUZLBVHHNDHRMPSPTYL9JGWVTHMJFBXKXOKBETORRDJGFLNQWWIEENZCXWYN9CMTSHKRCWCSLWMZFJSHWXWDSADGUCKNZMPSUNPYCFXWYFYFPJQVD9YV9YKNOWMQCDKYQHDCTLODJJLPSJNPTUYNVUDXHZFNTADVUNQENQRKWTXQWJZCHRBUWILFTXCFDMWTHSOMNQ9IDZCRCMJAMFGFRFBXJUEDAPCTGYYYVNHFERBSLUJSXVJWMHABVOYUTHQPXCZSGKTZVLOBNIYURYFEKVYTUKRPUPOSFOX9HNHOCGDTYNFUFIJRHKRGC9ESNTFWKXORLEGRICNKNECWETNRPBXSIVIZHXEPISSLYNBTJUENTQYPDOFCCCM9LXVZOAZKFFADAUHVKS9IOUXKQWTU9WXHNNSIFWDOHWSGFIQQMQXACBHOLJHCHYMTUWFHPDBWGQLYLOWCFACLXQ9JSR9NBBJNIOWTJFJNEKJDHVV9FD9DQECIEWRFRHHEYVSZBSEXABIBUIY9SHOJGBJHKYRHVBT9LQHPBLCLTER9AKMIOFHAULPDXUXITOFZDTNDUNSUUDDKKVISPXQALZTAYNEHVBRANN9WVSEFETRYXZWNMVKFFGZGHBLIWMGJURIBMTZPMQYUYCLRHJHKCTOGMDK9RRUHWXEKFTHYKIIBOFJWTXXBGPEV9JYTOBL9OBUQT9IM9EU9OZKBIAVJPWJSMWNC9OHEUJDVUODAUCAMFIPXYRBBNB9BCLBB9NYHYBWWMDCTOGJZMLPDBPMSWZZQCRAMAZTSTXZUAAUJXOJEOOMTUDXVJQVTGHAPGKPQOFCQETZURZAWZZITKQDWWWHPDDQ9BFWQWQLBOFBYPNZUXMIFLPOYMAE9XZ9UXQMQ9EVVNIYVUX9PLDNPWMPJCBBLDFGWNXPMRZDSPFLOKKFIEPJSKF9ZKDHHNYZTYVRJCA9HXEJLKKCBYXSIOPTZVPPYORVIPIOGBQF9P9UJDPN99WVFITBPGNJCZJSEZCAQCME9KUPPYOIRGMBNXORBIUAXCSWHRHJBR9CLSZCVTOCNW9UHVUHDLIRN9NFETXPLMQOIBZCYPRGAHHSUVTIXIJYKPTWAGXGKIXCGFFDLNMELRLWZLBUUILCDPCBRDTTRXNJ9KUWJIIDHE9WZREJXNRAVOURRQTIVGKLXXECFGXASRTAASXLXZOLCSZE9WNTQSBFQCFTCFHA9XOCT9WT9ELCJVLL9PWUTIZRTKREKUUPHPHFGWSPCINN9BYGLRPKMMXAJHFTMVDHQWXIVVCFOPRSEIVORVKYGIOYUFRDNNURBJ9DSKYWNXZHIQYRCWXBZHL9LHVTKFZ9TVUQYQXONULHU9RWYODO9CHSCFXSMCOVCBNZSHXGPYZIZBOSKSKQRADANJQIOXBMWGPECPKMZANDFFECUDLWHWWWJKKEKHIVMPJNESBTBLQICIVLKV9UJCMU9ANB9TYCLVTVHDALIN9CPCXI9DHR9QONEMCQGTQZA9UDHCTKNPTYIEJNPYJLPEOPAQT9UTEPWUGTJAZSFUJXIRHWKYWCXQYGMWBCVHDIXCQFOUMYQVCLNJHAKXQQTDLJUERCJGQXNWPQUCUAZKZKJNIJDSCRJQAPKEUSAHHMFEXOXOLHLHPS9GLWGSDJLNIBTIJCBJUQUINFTXGFIATKVGAVHWZBU9HYDQBIDDPSJYCDOUIPMERWRYV9CLPZOMOWKAZQGTCQFDWZUSOYVQWQLOXGOG9TNZJTGXRLODYHTSCD9GDKJMTJLWAEBVZUFHDVQKDSYAKVXJ9DNWQH9SGFDFSOMCJSSWBYKSZFRDVXMVB9XAEWPZTRNBJOBKYKB9AH9ZZAGGUCJABUABLQVRIEGSD9NWPFZJQDGFUCVGZFYCRCJ9URKAVEUIBYMVRSREFP9MCJ9MPCQTWJSGHTQFBMFM9QZJZXVNJKPCYAOIB9PWO9KEWWJNUZMVODUKSFUNGFNFQKNLYRRYCZHXSSPJJWLYVOYSPAQCHOYBQMIGBGMENEOEHHRVMYVDOPEWDSWUUMMLPWK9B9LQHTZIDT9KSX9CZFPUGHWUJTZRRJIMIICEOZDHJBJEEEEFYJMQFWAWHWBBHSAFFJEJ9ISFQWKZBEVMDTNSADFOLFNJJDDTTVIUHRICGGENWOMBRWJTYGRSWOMVOMTWFCLNTERMHNXPC99WJDTKSBMXWGIOGYXBTKRPJ9KWDHWNTRLFSBMQNBBYHJZFYEDATKBPFTLIEZTTIHGNSQYFNYEDHFMENQYLSNUHWYHODZQOVYGMJTCMTIGUPNADDGGXLMJAHZLNRANWIFJKEVOFG9CMGONUEGJSIIZGBWFHGUQH99WPPBWYSKLOTAQURE9YAPWXNZRITABYMNMKPZC9PWBVI99ZUIBHLVCOTREVEPM9ANCOUTPOXCWWLNFEXOJXNKBLEYJCGFJTZGPYZBEJJPYGOQIQEQNZLO9PCELK9MVOJDEDRTFCHPKXUWEKPGYMOKKJRZWQHPXSOYYNEXAMJEPSMMVGFCPSTSHVWYYAHUBU9UJTTAQIKSMRBXYATPUZEZGAOO9ZFGLNW9CXKMHGTIIBQJPABQNLVURSHWKMTUJHODELAWYRZPQ9YIRDVMSMFTZABNSLJ9GHKHYWENIOPPLFUZPDICCLQEJPYXYIEVOOVBA9TMWHERMBFWZCPVSTKTOHPWANWHIRUXVJHMQPSGUSGLMAXO9LDJKFOILCWUFPA9Q9QSRGCGWSNHOSNYDFRRKAFAA9VJEPOBKCGPXAMGKXTRNKHWPJBITFUZWYTDKASETUEDRLGDKESUVOYFJMNI9UULVNHUXLBC9QWCCXZGDGJQFCEKTODJIG9EHHKSDEGUYRSS9MOLYBVNDSYCGTO9UPBMVPJNZSLHCIDS99BEWNHXBETMEHFVEMCMNIWEDUD9BVUTJXJAXFQ9LYCTSKBCJGYYTFJKFXJOC9L9BUQULTUNJ9PCNUCDRCW9KHFTLIGCWAXLEOJ9CSJZY9FPTYBWBTKANRFIPCTUHZJCPQVJOAADYMHTZQY9FADZNPUODDDCTOIWZFVPNZOKEQJUNF9XXT999NZILBNC9GYXMTTLOOEOAOVYYIAMPYKUAIWWHDDGJJKHBOEW9JIGOTJVNNJJSFCJJXNQCMUOFONLNXMFGSLAEJXSORSXMPJDHYEGSUYEOXKQVJWICZBDOTAHTPHE9YPH9Y9UZTZTUTVALNLKBMCHCNFENDQCRJOTCCYMQNBLNF9TCNVGIFWCQW9L9AAMTXPQF9FKFCZDKUFFLSQNTJDCGPZKRFDNFMJBIHUIRIJJPQSDLMVADWZMRASOMPFDPNRZN9EEACCBCWFNPO9ZMIZOBORKK9YDDAJVDWZMYEMDLTUGAEAVM9XZVEDPWXBFAGCRXTPJMIHOYKXIYPTMVASDPBLIMBMWVXHFPGYCWOQMAWOYA9HRYBYCELLMDZIGJGGBTCMTJHHCDMXMPZBJUONEWEQU9WOOKRUMEZ9RNNXDBJEGBDXEEYPUBRG9RNYMKEPBIOEYLTSMCLFNFOIQAWBUMWWSOVDASOHLANBTBJFHEUZFDXUCRBZXYHCGOTBX9TVJAOGLXJARNHYNIGKVC9MVXGOIOFHFFCGVVPQQRERFCJYGBFYIKJNISCHQLZBKPPMUR9OFIUDGZEDXIOJFDWPDS9ALAE9JANQLZBBAVDQTCUU9VVJXIDOSMAOOJHLCSGPLRKTYSTV9PHREXPVVBPUFUZFNGBUQFBESTBNJWKKAXZOGMJBWQVXML99L9JZGEHXRMBDNVWDIKTRRZIYDLSRICUSAGVRSDJJAYJBWHG9OHTFKNY9RIWBZJUNPKZQTVYZIVJSJSRMJUJOHXEIFPXXGWUFVBFE9LGHQMCFYWPLVIOVJGJPFHZLXLQKJRLQ"
      val m = Multisig()
      val actual = m.getKey(TEST_SEED1, 0, 3)

      actual shouldBe expected
    }

  }

  "Multisig - finalizeAddress" should {

    "return new address" in {
      val expected = "QCCWYWKPZHIXNXGGZSNSPMPPFRXPLLRCPMFNWLQNACVJOTIGVZSYWBGNGGHAPXFYNKEWIYRHOGOMFJAKG"
      val curlStateTrytes = "QCCWYWKPZHIXNXGGZSNSPMPPFRXPLLRCPMFNWLQNACVJOTIGVZSYWBGNGGHAPXFYNKEWIYRHOGOMFJAKGVNXWSW9LOOAOLATAIYH9OGIQGEVMHNWMFNRW9ZBQCJHYXBEXJVZHIOCVKYWDPORXZHRY99FSSWOKERHRBWXJBUEGMRCLRDTYRSDXZWSLDIBBV9HH9WSKISZOJLLWM9QJGRRODHXACUGZNFIXEEHGOTFPRLTECNHDEK"
      val m = Multisig()
      val actual = m.finalizeAddress(curlStateTrytes)

      actual shouldBe expected
    }

  }

  "Multisig - validateAddress" should {

    "validates a generated multisig address" in {
      val multisigAddress = "QCCWYWKPZHIXNXGGZSNSPMPPFRXPLLRCPMFNWLQNACVJOTIGVZSYWBGNGGHAPXFYNKEWIYRHOGOMFJAKG"
      val m = Multisig()
      val digestOne = m.getDigest(TEST_SEED1, 3, 0)
      val digestTwo = m.getDigest(TEST_SEED2, 3, 0)
      val actual = m.validateAddress(multisigAddress, Array(Converter.trits(digestOne), Converter.trits(digestTwo)))

      actual shouldBe false
    }

  }

}
