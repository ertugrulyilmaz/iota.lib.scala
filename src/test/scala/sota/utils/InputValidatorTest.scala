package sota.utils

import org.scalatest.{Matchers, WordSpec}
import sota.error.InvalidAddressException
import sota.model.Transfer

class InputValidatorTest extends WordSpec with Matchers {

  val TEST_INVALID_ADDRESS = "12PNGMCSNRCTRHCHPXYTPKEJYPCOWKOMRXZFHH9N9VDIKMNVAZCMIYRHVJIAZARZTUETJVFDMBEBIQE9QTHBFWDAOEFA"
  val TEST_ADDRESS_WITHOUT_CHECKSUM = "PNGMCSNRCTRHCHPXYTPKEJYPCOWKOMRXZFHH9N9VDIKMNVAZCMIYRHVJIAZARZTUETJVFDMBEBIQE9QTHBFWDAOEFA"
  val TEST_ADDRESS_WITH_CHECKSUM = "PNGMCSNRCTRHCHPXYTPKEJYPCOWKOMRXZFHH9N9VDIKMNVAZCMIYRHVJIAZARZTUETJVFDMBEBIQE9QTHBFWDAOEFA"
  val
  val TEST_HASH = "OAATQS9VQLSXCLDJVJJVYUGONXAXOFMJOZNSYWRZSWECMXAQQURHQBJNLD9IOFEPGZEPEMPXCIVRX9999"
  val TEST_MESSAGE = "JOTA"
  val TEST_TAG = "JOTASPAM9999999999999999999"
  val TEST_NINES_TRYTES = "999999999999999999"
  val TEST_SEED = "CPBJTCPJSW99ZJRI9BLAUURDAFLAEDGFKBCQBNNQULUTZPQWCWJW9KJPUWCGQMCZNRZIQTAARYJT99999"
  val TEST_SEED2 = "CPBJTCPJSW99ZJRI9BLAUURDAFLAEDGFKBCQBNNQULUTZPQWCWJW9KJPUWCGQMCZNRZIQTAARYJT"

  "InputValidator - isAddress" should {

    "return true if address valid" in {
      InputValidator.isAddress(TEST_ADDRESS_WITH_CHECKSUM) shouldBe true
    }

    "return false if address invalid" in {
      InputValidator.isAddress(TEST_INVALID_ADDRESS) shouldBe false
    }

  }

  "InputValidator - checkAddress" should {

    "return true if address valid" in {
      InputValidator.checkAddress(TEST_ADDRESS_WITH_CHECKSUM) shouldBe true
    }

    "throw InvalidAddressException if address invalid" in {
      intercept[InvalidAddressException] {
        InputValidator.checkAddress(TEST_INVALID_ADDRESS)
      }
    }

  }

  "InputValidator - isTrytes" should {

    "return true if string contains trytes" in {
      InputValidator.isTrytes(TEST_ADDRESS_WITH_CHECKSUM, 0) shouldBe true
      InputValidator.isTrytes(TEST_ADDRESS_WITH_CHECKSUM, TEST_ADDRESS_WITH_CHECKSUM.length) shouldBe true
    }

    "return false if string not contains trytes" in {
      InputValidator.isTrytes(TEST_INVALID_ADDRESS, 0) shouldBe false
      InputValidator.isTrytes(TEST_INVALID_ADDRESS, TEST_ADDRESS_WITH_CHECKSUM.length) shouldBe false
    }

  }

  "InputValidator - isNinesTrytes" should {

    "return true if string contains only nines trytes" in {
      InputValidator.isNinesTrytes(TEST_NINES_TRYTES, 0) shouldBe true
      InputValidator.isNinesTrytes(TEST_NINES_TRYTES, TEST_NINES_TRYTES.length) shouldBe true
    }

    "return false if string not contains only nines trytes" in {
      InputValidator.isNinesTrytes(TEST_ADDRESS_WITH_CHECKSUM, 0) shouldBe false
      InputValidator.isNinesTrytes(TEST_ADDRESS_WITH_CHECKSUM, TEST_ADDRESS_WITH_CHECKSUM.length) shouldBe false
    }

  }

  "InputValidator - isArrayOfTrytes" should {

    "return true if array contains only trytes" in {
      val r = scala.util.Random
      val trytes = (1 to 2673).map(_ => Constants.TRYTE_ALPHABET.charAt(r.nextInt(Constants.TRYTE_ALPHABET.length))).mkString("")
      InputValidator.isArrayOfTrytes(Array(trytes)) shouldBe true
    }

    "return false if array not contains only trytes" in {
      InputValidator.isArrayOfTrytes(Array(TEST_INVALID_ADDRESS)) shouldBe false
    }

  }

  "InputValidator - isArrayOfHashes" should {

    "return true if array contains valid hashes" in {
      InputValidator.isArrayOfHashes(Array(TEST_HASH)) shouldBe true
    }

    "return false if array not contains valid hashes" in {
      InputValidator.isArrayOfTrytes(Array(TEST_INVALID_ADDRESS)) shouldBe false
    }

  }

  "InputValidator - isTransfersCollectionValid" should {

    "return true if all transfers is valid in collection" in {
      val transfer1 = Transfer(address = TEST_ADDRESS_WITH_CHECKSUM, value = 0, hash = TEST_HASH, message = TEST_MESSAGE, tag = TEST_TAG)
      val transfer2 = Transfer(address = TEST_ADDRESS_WITH_CHECKSUM, value = 0, message = TEST_MESSAGE, tag = TEST_TAG)
      InputValidator.isTransfersCollectionValid(Seq(transfer1, transfer2)) shouldBe true
    }

  }

  "InputValidator - validateSeed" should {

    "return true if seed is valid" in {
      InputValidator.validateSeed(TEST_SEED) shouldBe TEST_SEED
      InputValidator.validateSeed(TEST_SEED2) shouldBe TEST_SEED2 + "99999"
    }

  }

}
